{% extends "layout.html" %}
{% block title %}Language Map{% endblock %}
{% include "legend.html" %}
{% block head_js %}
<meta charset="utf-8">
<h1>--- Work in Progress ---</h1>
<style type="text/css">
</style>
{% endblock %}
{% block content %}
<div id="d3_container">
  <svg id="d3_svg_container" width="960" height="500">
    <g id="parent_grouper">
      <g id="art"></g>
      <g id="nodes"></g>
    </g>
  </svg>
</div>

<p><div id="shown_list"></div></p>
<p><div id="not_shown_list"></div></p>

<form>
  <!-- XXX check whether number is usable on most platforms -->
  <label>stuff below: <input type="number" id="speaker_count_threshold"
     name="speaker_count_threshold" value="0" /></label>
  <input type="button" value="Apply" onclick='render()'/>
</form>
<script type="text/javascript"
  src="{{ url_for('static', filename='d3.v5.min.js') }}"></script>
<script type="text/javascript"
  src="{{ url_for('static', filename='topojson.v3.min.js') }}"></script>
<script type="text/javascript">

// url field lacks a leading slash - this is added when the href
// is constructed. See comments in that part of the code
var locations = [
{% for iso, lat, lon, speaker_count, css_class in map_data %}
    { name: "{{ iso }}", lat: {{ lat }}, lon: {{ lon }}, speaker_count: {{ speaker_count }}, css_class: "{{ css_class }}", url: "language/iso/{{ iso }}" },
{% endfor %}
];

function get_locations_to_show() {
  var speaker_count_display_threshold = document.getElementById("speaker_count_threshold").value
  return locations.filter(function(x) {
    return x["speaker_count"] >= speaker_count_display_threshold && x["lat"] != null;
  });
}

function get_locations_to_hide() {
  var speaker_count_display_threshold = document.getElementById("speaker_count_threshold").value
  return locations.filter(function(x) {
    return x["speaker_count"] < speaker_count_display_threshold || x["lat"] == null;
  });
}

function render_text_description(locations_to_show, locations_to_hide) {
  // Legend
  d3.select("#shown_list").selectAll("p")
    .data([locations_to_show.length])
    .enter().append("p")
    .html(function(d) {return "Showing " + d + " languages on map:";});
  d3.select("#not_shown_list").selectAll("p")
    .data([locations_to_hide.length])
    .enter().append("p")
    .html(function(d) {return "Not showing " + d + " languages on map (below population threshold or no location data):";});

  var s = d3.select("#shown_list").selectAll("span")
    .data(locations_to_show)
  s.enter().append("span")
    .html(function(d) {return '<a href="/' + d.url + '">' + d.name + '</a> '})
    .attr("class", function(d) { return d.css_class });
  s.exit().remove();

  var s = d3.select("#not_shown_list").selectAll("span")
    .data(locations_to_hide)
  s.enter().append("span")
    .html(function(d) {return '<a href="/' + d.url + '">' + d.name + '</a> '})
    .attr("class", function(d) { return d.css_class });
  s.exit().remove();
}

function render() {
  var scale = (d3.event == null) ? 1 : d3.event.transform.k;
  var circle_radius = 5.0 / scale;
  var locations_to_show = get_locations_to_show()
  var locations_to_hide = get_locations_to_hide()

  render_text_description(locations_to_show, locations_to_hide);

  var s = d3.select("#nodes").selectAll("circle")
    .data(locations_to_show)
    .attr('r',  circle_radius)
  s.enter().append("circle")
    .attr('fill', 'steelblue')
    .attr('cx', function(d) {return projection([d.lon, d.lat])[0]})
    .attr('cy', function(d) {return projection([d.lon, d.lat])[1]})
    .attr('r',  circle_radius)
    .append("title")
      .text(function(d) { return d.name + "zzzz"; });
  s.exit().remove()
}

var projection = d3.geoMercator()
    .center([135, -26])
    .scale(600);

var path = d3.geoPath()
    .projection(projection);

var au_map = d3.json("{{ url_for('static', filename='au-states-topo.json') }}");

au_map.then(function(data) {
  var zoomListener = d3.zoom()
    .on("zoom", function zoomHandler() {
      d3.select("#parent_grouper")
        .attr("transform", d3.event.transform);
      render(data)
    });

  zoomListener(d3.select("#parent_grouper"));

  // This is the only place where we need the topojson so let's process
  //  it at this lower level, leaving the render function to operate
  //  independently of the topojson
  var s = d3.select("#art").selectAll("path")
    .data(topojson.feature(data, data.objects.austates).features)
  s.enter().append("path")
    .attr("d", path)
    .attr("fill", "#fff")
    .attr("fill-opacity", 0)
    .attr("stroke", "#ddd")

  render(data);
});
</script>
{% endblock %}
