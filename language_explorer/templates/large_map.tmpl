{% extends "layout.html" %}
{% block title %}Language Map{% endblock %}
{% include "legend.html" %}
{% block head_js %}
<meta charset="utf-8">
<style type="text/css">
.locationLabel {
    font-family: arial,helvetica,'sans-serif';
    text-align: left;
}
</style>
{% endblock %}
{% block content %}
<h1>Languages with Lat Lon</h1>
<p>{{ map_data|length }} languages shown on map</p>
  <svg>
    <g id="map" />
    <g id="art" />
    <g id="labels" />
  </svg>

<h1>Languages without Lat Lon</h1>
<p>{{ isos_not_shown|length }} languages not shown on map</p>
{% for iso in isos_not_shown %}
{{ macros.format_iso_as_href(iso) }},
{% endfor %}
{{ isos_not_shown|join(',') }}

<script type="text/javascript" src="{{ url_for('static', filename='d3.v359.min.js') }}"></script>
<script type="text/javascript" src="{{ url_for('static', filename='topojson.min.js') }}"></script>
<script type="text/javascript">

var width = 960,
    height = 500,
    label_text_size_px = 12;

// url field lacks a leading slash - this is added when the href
// is constructed. See comments in that part of the code
var locations = [
{% for iso, lat, lon in map_data %}
{ name: "{{ iso }}", lat: {{ lat }}, lon: {{ lon }}, css_class: "stuff", url: "language/iso/{{ iso }}" },
{% endfor %}
];

var projection = d3.geo.mercator()
    .center([135, -26])
    .scale(600);

var path = d3.geo.path()
    .projection(projection);

// Set dimensions of SVG elemet
var svg = d3.select("svg")
    .attr("width", width)
    .attr("height", height);

// Drawings go in #art, and labels go in #labels
art = svg.select("#art");
labels = svg.select("#labels");

d3.json("{{ url_for('static', filename='au-states-topo.json') }}", function(error, data) {
  if (error) return console.error(error);
  art.selectAll("path")
      .data(topojson.feature(data, data.objects.austates).features)
    .enter().append("path")
      .attr("d", path)
      .attr("fill", "#fff")
      .attr("fill-opacity", 0)
      .attr("stroke", "#ddd")
});

var locationPoints = art.selectAll('circle').data(locations);
var locationLabels = labels.selectAll('foreignObject').data(locations);

locationPoints.enter()
  .append('circle')
  .attr('cx', function(d) {return projection([d.lon, d.lat])[0]})
  .attr('cy', function(d) {return projection([d.lon, d.lat])[1]})
  .attr('r', 5)
  .attr('fill', 'steelblue');

labelForeignObjects = locationLabels.enter()
  .append('foreignObject')
  .attr('x', function(d) {return projection([d.lon, d.lat])[0]})
  .attr('y', function(d) {return projection([d.lon, d.lat])[1] - 1.5 * label_text_size_px})
  .attr('width', function(d) {return String(d.name.length * label_text_size_px * 0.75) + "px"})
  .attr('height', 2.5 * label_text_size_px + "px")

htmlDOMs = labelForeignObjects.append('xhtml:body')

htmlLabels = htmlDOMs.append('div')
  .classed('htmlLabel', true)

// URL has a leading slash so that the path is transformed when the
// static site is made.
htmlLabels.append('p')
  .attr("class", function(d) { return d.css_class })
  .style("font-size", label_text_size_px + "px")
  .html(function(d) {return '<a href="/' + d.url + '">' + d.name + '</a>'})

</script>
{% endblock %}
