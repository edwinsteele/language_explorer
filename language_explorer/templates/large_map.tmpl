{% extends "layout.html" %}
{% block title %}Language Map{% endblock %}
{% include "legend.html" %}
{% block head_js %}
<meta charset="utf-8">
<style type="text/css">
.locationLabel {
    font-family: arial,helvetica,'sans-serif';
    text-align: left;
}
</style>
{% endblock %}
{% block content %}
<h1>Languages with Lat Lon</h1>
<p>{{ map_data|length }} languages shown on map</p>
  <div id="d3_container"></div>

<h1>Languages without Lat Lon</h1>
<p>{{ isos_not_shown|length }} languages not shown on map</p>
{% for iso in isos_not_shown %}
{{ macros.format_iso_as_href(iso) }},
{% endfor %}

<script type="text/javascript" src="{{ url_for('static', filename='d3.v359.min.js') }}"></script>
<script type="text/javascript" src="{{ url_for('static', filename='topojson.min.js') }}"></script>
<script type="text/javascript">

var width = 960,
    height = 500,
    circle_base_radius = 5,
    label_base_px = 2,
    label_var_px = 10;  // font size = base + variable

function get_label_x_coord(d) {
  var orig_x = projection([d.lon, d.lat])[0];
  // Haven't zoomed yet
  if (d3.event == null) {
    return orig_x;
  }
  else {
    return orig_x - Math.min(6, (d3.event.scale * 1.5));
  }
}

function get_label_y_coord(d) {
  var orig_y = projection([d.lon, d.lat])[1];
  // Haven't zoomed yet
  if (d3.event == null) {
    return orig_y - label_base_px - label_var_px;
  }
  else {
    return orig_y - label_base_px - (label_var_px / d3.event.scale);
  }
}

function get_label_font_size_str(d) {
  if (d3.event == null) {
    return label_base_px + label_var_px + "px";
  }
  else {
    return label_base_px + (label_var_px / d3.event.scale) + "px";
  }
}

// url field lacks a leading slash - this is added when the href
// is constructed. See comments in that part of the code
var locations = [
{% for iso, lat, lon in map_data %}
{ name: "{{ iso }}", lat: {{ lat }}, lon: {{ lon }}, css_class: "xxx", url: "language/iso/{{ iso }}" },
{% endfor %}
];

var zoomListener = d3.behavior.zoom()
  .scaleExtent([1, 10])
  .on("zoom", zoomHandler);

var projection = d3.geo.mercator()
    .center([135, -26])
    .scale(600);

var path = d3.geo.path()
    .projection(projection);

// Set dimensions of SVG elemet
var svg = d3.select("#d3_container").append("svg")
    .attr("width", width)
    .attr("height", height);

svg_container = svg.append("g");
// Drawings go in #art, and labels go in #labels
art = svg_container.append("g");
labels = svg_container.append("g");

d3.json("{{ url_for('static', filename='au-states-topo.json') }}", function(error, data) {
  if (error) return console.error(error);
  art.selectAll("path")
      .data(topojson.feature(data, data.objects.austates).features)
    .enter().append("path")
      .attr("d", path)
      .attr("fill", "#fff")
      .attr("fill-opacity", 0)
      .attr("stroke", "#ddd")
});

var locationPoints = art.selectAll('circle').data(locations);
var locationLabels = labels.selectAll('foreignObject').data(locations);

locationPoints.enter()
  .append('circle')
  .attr('cx', function(d) {return projection([d.lon, d.lat])[0]})
  .attr('cy', function(d) {return projection([d.lon, d.lat])[1]})
  .attr('r', circle_base_radius)
  .attr('fill', 'steelblue');

labelForeignObjects = locationLabels.enter()
  .append('foreignObject')
  .attr('x', function(d) {return get_label_x_coord(d)})
  .attr('y', function(d) {return get_label_y_coord(d)})
  .attr('width', function(d) {return String(d.name.length * (label_base_px + label_var_px) * 0.75) + "px"})
  .attr('height', 2.5 * (label_base_px + label_var_px) + "px")

htmlDOMs = labelForeignObjects.append('xhtml:body')

htmlLabels = htmlDOMs.append('div')
  .classed('htmlLabel', true)

// URL has a leading slash so that the path is transformed when the
// static site is made.
htmlLabels.append('p')
  .attr("class", function(d) { return d.css_class })
  .style("font-size", function(d) {return get_label_font_size_str(d)})
  .html(function(d) {return '<a href="/' + d.url + '">' + d.name + '</a>'})

function zoomHandler() {
  // Resize Points
  svg_container.selectAll('circle')
    .attr('r', function(d) { return circle_base_radius / d3.event.scale; });
  // Resize Labels
  htmlLabels.selectAll("p")
    .style("font-size", function(d) {return get_label_font_size_str(d)})
  // Shift placement of labels to be closer to the points
  labels.selectAll("foreignObject")
    .attr('x', function(d) {return get_label_x_coord(d)})
    .attr('y', function(d) {return get_label_y_coord(d)})

  // And zoom the SVG
  svg_container.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
}

zoomListener(svg_container);
</script>
{% endblock %}
