{% extends "layout.html" %}
{% block title %}Language Map{% endblock %}
{% block head_js %}
<meta charset="utf-8">
<style type="text/css">
</style>
{% endblock %}
{% block content %}
<div id="d3_container">
  <svg id="d3_svg_container" width="960" height="500">
    <g id="parent_grouper">
      <g id="art"></g>
      <g id="nodes"></g>
    </g>
  </svg>
</div>

<p>Showing <span id="shown_count"></span> languages:<div id="shown_list"></div></p>
<p>Hiding <span id="hidden_count"></span> languages:<div id="not_shown_list"></div></p>

<form>
  <h3>Include</h3>
  <label>Minimum Speakers:
    <select id="min_speaker_count" name="min_speaker_count" onchange="render()">
      <option value="-3" selected>No min</option> <!-- negative includes unknown -->
      <option value="50">50</option>
      <option value="100">100</option>
      <option value="500">500</option>
      <option value="1000">1000</option>
    </select>
  </label>
  <label>Maximum Speakers:
    <select id="max_speaker_count" name="max_speaker_count" onchange="render()">
      <option value="50">50</option>
      <option value="100">100</option>
      <option value="500">500</option>
      <option value="1000">1000</option>
      <option value="999999" selected>No max</option>
    </select>
  </label>
  <br>
  <label>No scripture<input type="checkbox" name="scripture_none" value="1" checked onchange="render()"></label>
  <label>Some books<input type="checkbox" name="scripture_some" value="1" checked onchange="render()"></label>
  <label>New testament<input type="checkbox" name="scripture_nt" value="1" checked onchange="render()"></label>
  <label>Whole bible<input type="checkbox" name="scripture_wb" value="1" checked onchange="render()"></label>
</form>
{% include "legend.html" %}
<script type="text/javascript"
  src="{{ url_for('static', filename='d3.v5.min.js') }}"></script>
<script type="text/javascript"
  src="{{ url_for('static', filename='topojson.v3.min.js') }}"></script>
<script type="text/javascript">

// url field lacks a leading slash - this is added when the href
// is constructed. See comments in that part of the code
var locations = [
{% for iso, lat, lon, speaker_count, css_class in map_data %}
    { name: "{{ iso }}", lat: {{ lat }}, lon: {{ lon }}, speaker_count: {{ speaker_count }}, css_class: "{{ css_class }}", url: "language/iso/{{ iso }}" },
{% endfor %}
];


function get_circle_colour(lang) {
  // check whether it's easier to apply CSS to svg elements
  if (lang.css_class.includes("scripture_none")) {
    return "red"
  }
  if (lang.css_class.includes("scription_book")) {
    return "orange"
  }
  if (lang.css_class.includes("scripture_portions")) {
    return "yellow"
  }
  if (lang.css_class.includes("scripture_nt")) {
    return "greenyellow"
  }
  if (lang.css_class.includes("scription_wb")) {
    return "green"
  }
  // No idea...
  return "grey"
}

function get_locations_to_show() {
  var min_speaker_count = Number(document.getElementById("min_speaker_count").value)
  var max_speaker_count = Number(document.getElementById("max_speaker_count").value)
  return locations.filter(function(x) {
    console.log(x.name, x.css_class)
    if (x.css_class.includes("scripture_none") &&
        !document.forms[0].elements["scripture_none"].checked) {
      return false
    }
    if (x.css_class.includes("scripture_book") &&
        !document.forms[0].elements["scripture_some"].checked) {
      return false
    }
    if (x.css_class.includes("scripture_portions") &&
        !document.forms[0].elements["scripture_some"].checked) {
      return false
    }
    if (x.css_class.includes("scripture_nt") &&
        !document.forms[0].elements["scripture_nt"].checked) {
      console.log("in scripture_nt branch, returning false")
      return false
    }
    if (x.css_class.includes("scripture_wb") &&
        !document.forms[0].elements["scripture_wb"].checked) {
      return false
    }
    return x["speaker_count"] >= min_speaker_count &&
           x["speaker_count"] < max_speaker_count &&
           x["lat"] != null;
  });
}

function render_text_description(locations_to_show) {
  document.getElementById("shown_count").textContent = locations_to_show.length.toString()
  document.getElementById("hidden_count").textContent = locations.length - locations_to_show.length

  console.log(locations_to_show)
  var s = d3.select("#shown_list").selectAll("span")
    .data(locations_to_show)
    .html(function(d) {return '<a href="/' + d.url + '">' + d.name + '</a> '})
    .attr("class", function(d) { return d.css_class });
  s.enter().append("span")
    .html(function(d) {return '<a href="/' + d.url + '">' + d.name + '</a> '})
    .attr("class", function(d) { return d.css_class });
  s.exit().remove();
}

function render() {
  var scale = (d3.event == null) ? 1 : d3.event.transform.k;
  var circle_radius = 5.0 / scale;
  var stroke_width = 1.0 / scale;
  var locations_to_show = get_locations_to_show()

  render_text_description(locations_to_show);

  var s = d3.select("#nodes").selectAll("circle")
    .data(locations_to_show)
    .attr('r',  circle_radius)
  s.enter().append("circle")
    .attr('fill', function(d) {return get_circle_colour(d)})
    .attr('cx', function(d) {return projection([d.lon, d.lat])[0]})
    .attr('cy', function(d) {return projection([d.lon, d.lat])[1]})
    .attr('r',  circle_radius)
    .attr('stroke', 'black')
    .attr('stroke-width', stroke_width)
    .append("title")
      .text(function(d) { return d.name + "zzzz"; });
  s.exit().remove()
}

var projection = d3.geoMercator()
    .center([135, -26])
    .scale(600);

var au_map = d3.json("{{ url_for('static', filename='au-states-topo.json') }}");

au_map.then(function(data) {

  var svg = d3.select("#parent_grouper")
    .call(d3.zoom().on("zoom", function () {
      svg.attr("transform", d3.event.transform);
      render(data)
    }));

  // This is the only place where we need the topojson so let's process
  //  it at this lower level, leaving the render function to operate
  //  independently of the topojson
  var s = d3.select("#art").selectAll("path")
    .data(topojson.feature(data, data.objects.austates).features)
  s.enter().append("path")
    .attr("d", d3.geoPath().projection(projection))
    .attr("fill", "#fff")
    .attr("fill-opacity", 0)
    .attr("stroke", "#ddd")

  render(data);
});
</script>
{% endblock %}
